#!/usr/bin/env python
"""
Script untuk generate encryption keys dan secrets untuk SecureAuth API.
Usage: python scripts/generate_keys.py
"""

import secrets
import string
import base64
from pathlib import Path
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC


def generate_secret_key(length: int = 64) -> str:
    """
    Generate a cryptographically secure secret key.
    
    Args:
        length: Length of the key in characters
        
    Returns:
        Secure random string
    """
    # Use all printable characters except quotes and backslash
    alphabet = string.ascii_letters + string.digits + "!@#$%^&*()_+-=[]{}|;:,.<>?"
    return ''.join(secrets.choice(alphabet) for _ in range(length))


def generate_fernet_key() -> str:
    """
    Generate a Fernet encryption key.
    
    Returns:
        Base64 encoded Fernet key
    """
    return Fernet.generate_key().decode()


def generate_jwt_secret(length: int = 64) -> str:
    """
    Generate a JWT signing secret.
    
    Args:
        length: Length of the secret
        
    Returns:
        Hex encoded secret
    """
    return secrets.token_hex(length // 2)


def derive_key_from_password(password: str, salt: bytes) -> str:
    """
    Derive an encryption key from a password using PBKDF2.
    
    Args:
        password: Password to derive from
        salt: Salt for key derivation
        
    Returns:
        Base64 encoded derived key
    """
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
    )
    key = base64.urlsafe_b64encode(kdf.derive(password.encode()))
    return key.decode()


def generate_env_file(output_path: Path = Path(".env.generated")):
    """
    Generate a .env file with all required secrets.
    
    Args:
        output_path: Path to output file
    """
    print("Generating secure keys and secrets...\n")
    
    # Generate all required keys
    keys = {
        "SECRET_KEY": generate_secret_key(64),
        "ENCRYPTION_KEY": generate_fernet_key(),
        "JWT_SECRET_KEY": generate_jwt_secret(64),
        "DATABASE_ENCRYPTION_KEY": generate_fernet_key(),
        "SESSION_SECRET": generate_secret_key(32),
        "CSRF_SECRET": generate_secret_key(32),
        "API_KEY_SALT": secrets.token_hex(16),
        "PASSWORD_PEPPER": generate_secret_key(32),
    }
    
    # Template for .env file
    env_template = f"""# SecureAuth API Environment Configuration
# Generated by generate_keys.py
# WARNING: Keep these values secret and never commit to version control!

# Application Settings
APP_NAME="SecureAuth API"
APP_VERSION="1.0.0"
DEBUG=False
ENVIRONMENT=production
API_V1_STR=/api/v1

# Security Keys (KEEP SECRET!)
SECRET_KEY="{keys['SECRET_KEY']}"
ENCRYPTION_KEY="{keys['ENCRYPTION_KEY']}"
JWT_SECRET_KEY="{keys['JWT_SECRET_KEY']}"
DATABASE_ENCRYPTION_KEY="{keys['DATABASE_ENCRYPTION_KEY']}"
SESSION_SECRET="{keys['SESSION_SECRET']}"
CSRF_SECRET="{keys['CSRF_SECRET']}"
API_KEY_SALT="{keys['API_KEY_SALT']}"
PASSWORD_PEPPER="{keys['PASSWORD_PEPPER']}"

# JWT Settings
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30
REFRESH_TOKEN_EXPIRE_DAYS=30
EMAIL_VERIFICATION_TOKEN_EXPIRE_HOURS=24
PASSWORD_RESET_TOKEN_EXPIRE_HOURS=1

# Database
DATABASE_URL=postgresql://user:password@localhost:5432/secureauth
DB_POOL_SIZE=20
DB_MAX_OVERFLOW=0
DB_POOL_PRE_PING=true

# Redis
REDIS_URL=redis://localhost:6379/0
REDIS_POOL_SIZE=10

# Email Settings
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASSWORD=your-app-password
SMTP_TLS=true
SMTP_SSL=false
EMAIL_FROM_NAME=SecureAuth
EMAIL_FROM_ADDRESS=noreply@secureauth.com

# CORS Settings
BACKEND_CORS_ORIGINS=["http://localhost:3000","http://localhost:8000"]

# Rate Limiting
RATE_LIMIT_PER_MINUTE=60
RATE_LIMIT_PER_HOUR=1000
LOGIN_RATE_LIMIT_PER_MINUTE=5

# Password Policy
PASSWORD_MIN_LENGTH=8
PASSWORD_REQUIRE_UPPERCASE=true
PASSWORD_REQUIRE_LOWERCASE=true
PASSWORD_REQUIRE_NUMBERS=true
PASSWORD_REQUIRE_SPECIAL=true
PASSWORD_HISTORY_COUNT=5

# Account Security
MAX_LOGIN_ATTEMPTS=5
ACCOUNT_LOCKOUT_MINUTES=30
SESSION_TIMEOUT_MINUTES=1440
REQUIRE_EMAIL_VERIFICATION=true

# Two Factor Authentication
TWO_FACTOR_ISSUER_NAME=SecureAuth
TWO_FACTOR_BACKUP_CODES_COUNT=10

# Device Tracking
DEVICE_TRUST_DAYS=30
MAX_DEVICES_PER_USER=10

# Logging
LOG_LEVEL=INFO
LOG_FORMAT="%(asctime)s - %(name)s - %(levelname)s - %(message)s"

# Frontend URL (for email links)
FRONTEND_URL=http://localhost:3000
"""
    
    # Write to file
    output_path.write_text(env_template)
    
    print(f"✅ Generated .env file: {output_path}")
    print("\n⚠️  IMPORTANT SECURITY NOTES:")
    print("1. Never commit the generated .env file to version control")
    print("2. Keep a secure backup of these keys")
    print("3. Use different keys for each environment (dev, staging, prod)")
    print("4. Rotate keys periodically")
    print("5. Update the database and Redis URLs with your actual values")
    print("6. Update SMTP settings with your email provider details")
    
    # Also create a key backup file (optional)
    backup_path = output_path.with_suffix(".keys.backup")
    with open(backup_path, 'w') as f:
        f.write("# SecureAuth API Keys Backup\n")
        f.write("# Store this file in a secure location!\n\n")
        for key, value in keys.items():
            f.write(f"{key}={value}\n")
    
    print(f"\n✅ Key backup saved to: {backup_path}")


def validate_existing_env(env_path: Path = Path(".env")):
    """
    Validate existing .env file for required keys.
    
    Args:
        env_path: Path to .env file
    """
    if not env_path.exists():
        print(f"❌ No .env file found at {env_path}")
        return False
    
    required_keys = [
        "SECRET_KEY",
        "ENCRYPTION_KEY",
        "DATABASE_URL",
        "REDIS_URL",
        "SMTP_HOST",
        "SMTP_USER",
        "SMTP_PASSWORD"
    ]
    
    # Read env file
    env_content = env_path.read_text()
    missing_keys = []
    
    for key in required_keys:
        if f"{key}=" not in env_content:
            missing_keys.append(key)
    
    if missing_keys:
        print("❌ Missing required keys in .env file:")
        for key in missing_keys:
            print(f"   - {key}")
        return False
    
    print("✅ All required keys found in .env file")
    return True


def main():
    """Main function."""
    print("=== SecureAuth API Key Generator ===\n")
    
    # Check if .env already exists
    env_path = Path(".env")
    if env_path.exists():
        print("⚠️  Warning: .env file already exists!")
        response = input("Do you want to generate a new .env file? (y/n): ").lower()
        if response != 'y':
            print("\nValidating existing .env file...")
            validate_existing_env(env_path)
            return
    
    # Generate new keys
    generate_env_file()
    
    print("\n✅ Key generation complete!")
    print("\nNext steps:")
    print("1. Copy .env.generated to .env")
    print("2. Update database and Redis connection strings")
    print("3. Configure your email provider settings")
    print("4. Adjust any other settings as needed")


if __name__ == "__main__":
    main()